{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "180baf5c-faa3-46eb-8267-120c729f5f9e",
   "metadata": {},
   "source": [
    "# QUIZ GAME"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "828bc001-544c-41df-86eb-58ac3adb57aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to my computer quiz！\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to play? : no\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "exit the game...\n",
      "Okay lets play :)(⊙o⊙)\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "What does the cpu stand for? :  nono\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Incorrect :(\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "What does the gpu stand for? :  non\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Incorrect :(\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "What does the RAM stand for? :  nop\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Incorrect :(\n"
     ]
    }
   ],
   "source": [
    "print(\"Welcome to my computer quiz！\")\n",
    "\n",
    "playing = input(\"Do you want to play? :\")\n",
    "\n",
    "if playing.lower() != \"yes\":\n",
    "    quit() ---- # use quit() or exit() in IDE to end the code\n",
    "    \n",
    "print(\"Okay lets play :)(⊙o⊙)\")\n",
    "\n",
    "answer = input(\"What does the cpu stand for? : \")\n",
    "\n",
    "if answer.lower() == \"central processing unit\":\n",
    "    print(\"Correct!\")\n",
    "else:\n",
    "    print(\"Incorrect :(\")\n",
    "\n",
    "answer = input(\"What does the gpu stand for? : \").lower()\n",
    "\n",
    "if answer == \"graphics processing unit\":\n",
    "    print(\"Correct!\")\n",
    "else:\n",
    "    print(\"Incorrect :(\")\n",
    "\n",
    "answer = input(\"What does the RAM stand for? : \")\n",
    "\n",
    "if answer.lower() == \"random access memory\":\n",
    "    print(\"Correct!\" ,'Congratulation Completed All!!!')\n",
    "else:\n",
    "    print(\"Incorrect :(\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e17ba106-8e47-4179-afff-cb721ca7f8aa",
   "metadata": {},
   "source": [
    "# jupyter version, because cannot use quit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9677d177-e0b4-44d9-918e-bb2b751e2bc5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to my computer quiz!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to play? (yes/no):  no\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Quiz aborted.\n"
     ]
    }
   ],
   "source": [
    "def run_quiz():\n",
    "    print(\"Welcome to my computer quiz!\")\n",
    "    \n",
    "    playing = input(\"Do you want to play? (yes/no): \")\n",
    "    \n",
    "    if playing.lower() != \"yes\":\n",
    "        print(\"Quiz aborted.\")\n",
    "        return  # Stops the function if the user does not want to play\n",
    "    \n",
    "    print(\"Okay, let's play! :)\")\n",
    "    \n",
    "    answer = input(\"What does the CPU stand for? \")\n",
    "    if answer.lower() == \"central processing actually unit\":\n",
    "        print(\"Correct!\")\n",
    "    else:\n",
    "        print(\"Incorrect :(\")\n",
    "    \n",
    "    answer = input(\"What does the GPU stand for? \")\n",
    "    if answer.lower() == \"graphics processing actually unit\":\n",
    "        print(\"Correct!\")\n",
    "    else:\n",
    "        print(\"Incorrect :(\")\n",
    "    \n",
    "    answer = input(\"What does the RAM stand for? \")\n",
    "    if answer.lower() == \"random access memory\":\n",
    "        print(\"Correct! Congratulations, you completed all the questions!\")\n",
    "    else:\n",
    "        print(\"Incorrect :(\")\n",
    "\n",
    "# Call the function to run the quiz\n",
    "run_quiz()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5e5a7060-f333-4ddb-8286-d4d24f795fcd",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (554183017.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[1], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    git add .\u001b[0m\n\u001b[1;37m        ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "git add .\n",
    "git commit -m \"Add Jupyter Notebooks\"\n",
    "git push origin master"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54de38b4-fb62-4fa1-8437-7e55c7ceb8fa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
